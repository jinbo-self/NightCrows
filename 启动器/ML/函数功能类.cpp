#include "pch.h"
#include "CMainDialogWnd.h"



void 穿戴装备(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    if (!识字.查找背包())
    {
        键鼠.按下按键('I');
    }

    //背包左右间距54 996，137；1050，137；1104，137；1158，137  》190
    //上下间距54，137，191，245，299
    Sleep(1000);
    键鼠.移动鼠标(1247, 210); //装备栏
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.移动鼠标(1188, 636);//整理背包
    键鼠.点击鼠标左键();
    Sleep(1000);
    识图坐标 背包E起始 = { 996,137,{204,183,142} };
    //先脱下所有装备
    int 背包装备x[4] = { 1017,1069,1127,1178 }; //直接记录一行的位置
    while (识字.查找背包() && 识图.识别颜色(背包E起始)[0] > 190)
    {
        if (running) {
            return;
        }
        for (int index = 0; index < 4; index++)
        {
            if (running) {
                return;
            }
            int 背包x = 背包装备x[index];
            if (识图.识别颜色({ 背包E起始.x + index * 54,137 })[0] > 190)
            {
                键鼠.移动鼠标(背包x, 137);
                键鼠.点击鼠标左键();
                Sleep(200);
                键鼠.点击鼠标左键();
                Sleep(1500);
            }


        }
        键鼠.移动鼠标(1188, 636);//整理背包
        键鼠.点击鼠标左键();
        Sleep(1500);
    }

    //计算装备数量
    int index = 0;
    识图坐标 背包起始 = { 1004,140 };//25*25
    int 装备数量 = 0;
    while (识字.查找背包())
    {
        if (running) {
            return;
        }
        int 背包y = 背包起始.y + index * 54;
        bool 跳出 = false;
        for (size_t i = 0; i < 4; i++)
        {
            if (running) {
                return;
            }
            int 背包x = 背包起始.x + i * 54;
            std::array<BYTE, 3> 检测色块 = { 60,60,60 };
            if (!识图.检查范围内颜色(背包x, 背包y, 25, 25, 检测色块))
            {
                装备数量 = index * 4 + i;
                跳出 = true;
                break;
            }
        }
        if (跳出)
        {
            break;
        }
        index++;
    }
    //OutputDebugString(std::to_wstring(装备数量).c_str());
    //从尾部开始穿戴
    //第一个装备还是需要穿戴
    背包起始 = { 1019,155 };//25*25
    while (装备数量 > -1)
    {
        if (running) {
            return;
        }
        int 行号 = 装备数量 / 4;//13/4=3...1  12/4=3...0
        int 列号 = 装备数量 % 4;
        识图坐标 坐标 = { 背包起始.x + 列号 * 54,背包起始.y + 行号 * 54 };
        键鼠.移动鼠标(坐标.x, 坐标.y);
        键鼠.点击鼠标左键();
        Sleep(500);
        键鼠.点击鼠标左键();
        Sleep(1500);
        装备数量--;
    }
    if (识字.查找背包())
    {
        键鼠.按下按键('I');
    }
    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);
}

void 学习和摆放技能(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    //学习技能
    if (!识字.查找背包())
    {
        键鼠.按下按键('I');
    }
    Sleep(500);
    键鼠.移动鼠标(1248, 277); //背包藏品栏
    键鼠.点击鼠标左键();
    Sleep(500);
    键鼠.移动鼠标(1188, 636);//整理背包
    键鼠.点击鼠标左键();
    Sleep(500);
    int index = 0;
    识图坐标 背包起始 = { 1004,140 };//25*25
    int 物品数量 = 0;

    //查找背包,学习技能
    while (识字.查找背包())
    {
        if (running) {
            return;
        }
        int 背包y = 背包起始.y + index * 54;
        bool 跳出 = false;
        for (size_t i = 0; i < 4; i++)
        {
            if (running) {
                return;
            }
            int 背包x = 背包起始.x + i * 54;
            std::array<BYTE, 3> 检测色块 = { 60,60,60 };//空背包
            if (!识图.检查范围内颜色(背包x, 背包y, 25, 25, 检测色块))
            {
                物品数量 = index * 4 + i;
                跳出 = true;
                break;
            }
        }
        if (跳出)
        {
            break;
        }
        index++;
    }

    //第一个装备还是需要穿戴
    背包起始 = { 1019,155 };//25*25
    while (物品数量 > -1)
    {
        if (running) {
            return;
        }
        int 行号 = 物品数量 / 4;//13/4=3...1  12/4=3...0
        int 列号 = 物品数量 % 4;
        识图坐标 坐标 = { 背包起始.x + 列号 * 54,背包起始.y + 行号 * 54 };
        键鼠.移动鼠标(坐标.x, 坐标.y);
        键鼠.点击鼠标左键();
        Sleep(1000);
        if (识字.查找背包技能书说明())
        {
            键鼠.点击鼠标左键();
            Sleep(1000);
        }
        物品数量--;
    }

    //摆放技能
    if (!识字.查找主动技能())
    {
        键鼠.按下按键('K');
    }
    Sleep(500);
    键鼠.移动鼠标(1243, 147); //主动技能栏
    键鼠.点击鼠标左键();

    Sleep(500);
    键鼠.移动鼠标(1036, 638); //技能排序
    键鼠.点击鼠标左键();

    Sleep(500);
    if (!识字.查找技能排序自动释放())
    {
        键鼠.移动鼠标((识字.技能排序自动释放.x1 + 识字.技能排序自动释放.x2) / 2, (识字.技能排序自动释放.y1 + 识字.技能排序自动释放.y2) / 2);
        键鼠.点击鼠标左键();
    }
    //反复释放
    if (识图.识别颜色({ 37,649 })[0] < 100 && 识图.识别颜色({ 37,649 })[1] < 100 && 识图.识别颜色({ 37,649 })[2] < 100)
    {
        Sleep(500);
        键鼠.移动鼠标(37, 649);
        键鼠.点击鼠标左键();
    }
    //PVP释放
    if (识图.识别颜色({ 157,649 })[0] < 100 && 识图.识别颜色({ 157,649 })[1] < 100 && 识图.识别颜色({ 157,649 })[2] < 100)
    {
        Sleep(500);
        键鼠.移动鼠标(157, 649);
        键鼠.点击鼠标左键();
    }
    //跳过无法释放的技能
    if (识图.识别颜色({ 37,679 })[0] < 100 && 识图.识别颜色({ 37,679 })[1] < 100 && 识图.识别颜色({ 37,679 })[2] < 100)
    {
        Sleep(500);
        键鼠.移动鼠标(37, 679);
        键鼠.点击鼠标左键();
    }
    //猎人开启决心
    if (!识字.查找猎人_决心技能自动开启()) {
        Sleep(500);
        键鼠.移动鼠标((识字.猎人_决心技能自动开启.x1 + 识字.猎人_决心技能自动开启.x2) / 2, (识字.猎人_决心技能自动开启.y1 + 识字.猎人_决心技能自动开启.y2) / 2);
        键鼠.点击鼠标左键();
    }

    //重置技能
    Sleep(500);
    键鼠.移动鼠标(96, 714);
    键鼠.点击鼠标左键();
    Sleep(500);
    键鼠.按下按键('Y');
    Sleep(500);
    //放置技能1
    键鼠.移动鼠标(1010, 162);
    键鼠.点击鼠标左键();
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(500);
    //放置技能2
    键鼠.移动鼠标(1010, 222);
    键鼠.点击鼠标左键();
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(500);
    //放置技能3
    键鼠.移动鼠标(1010, 288);
    键鼠.点击鼠标左键();
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(500);
    //放置技能4
    键鼠.移动鼠标(1010, 352);
    键鼠.点击鼠标左键();
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(500);
    //完成放置
    键鼠.移动鼠标(1033, 637);
    键鼠.点击鼠标左键();
    Sleep(500);

    //关闭技能栏
    if (识字.查找主动技能())
    {
        键鼠.按下按键('K');
    }
    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);
}

void 持续技能开启(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    Sleep(1000);
    //摆放技能
    if (!识字.查找主动技能())
    {
        键鼠.按下按键('K');
    }
    Sleep(500);
    键鼠.移动鼠标(1243, 147); //主动技能栏
    键鼠.点击鼠标左键();
    Sleep(1000);
    //说明还没转职，那下面的持续技能就不用判断了
    if (!识字.查找弓箭手_侵蚀技能())
    {
        while (!(识图.isAuto() || 识图.isQuest())) {
            if (running) {
                return;
            }
            键鼠.按下按键(VK_ESCAPE);
        }
        return;
    }
    while (!识字.查找技能_失明())
    {
        //1176,119  1198,132  ->   1176,590  1198,603
        
        键鼠.移动鼠标(1097, 594);
        键鼠.按下鼠标左键();
        Sleep(1000);
        键鼠.移动鼠标(1097, 133);
        Sleep(1000);
        键鼠.弹起鼠标左键();
        Sleep(1000);
    }
    //决心自动
    if (!识字.查找弓箭手_决心开启())
    {
        键鼠.移动鼠标((识字.弓箭手_决心开启.x1+ 识字.弓箭手_决心开启.x2)/2, (识字.弓箭手_决心开启.y1+ 识字.弓箭手_决心开启.y2)/2);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    //精准射击
    if (!识字.查找弓箭手_精准射击开启())
    {
        键鼠.移动鼠标((识字.弓箭手_精准射击开启.x1 + 识字.弓箭手_精准射击开启.x2) / 2, (识字.弓箭手_精准射击开启.y1 + 识字.弓箭手_精准射击开启.y2) / 2);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    //开始狩猎
    if (!识字.查找弓箭手_开始狩猎开启())
    {
        键鼠.移动鼠标((识字.弓箭手_开始狩猎开启.x1 + 识字.弓箭手_开始狩猎开启.x2) / 2, (识字.弓箭手_开始狩猎开启.y1 + 识字.弓箭手_开始狩猎开启.y2) / 2);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    //回到主界面
    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);
}

void 嗑状态药(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    if (!识字.查找背包())
    {
        键鼠.按下按键('I');
    }
    键鼠.移动鼠标(1245, 338);
    键鼠.点击鼠标左键();
    Sleep(1000);

    //背包遍历
    int index = 0;
    识图坐标 背包起始 = { 1004,140 };//25*25
    int 物品数量 = 0;
    while (识字.查找背包())
    {
        if (running) {
            return;
        }
        int 背包y = 背包起始.y + index * 54;
        bool 跳出 = false;
        for (size_t i = 0; i < 4; i++)
        {
            if (running) {
                return;
            }
            int 背包x = 背包起始.x + i * 54;
            std::array<BYTE, 3> 检测色块 = { 60,60,60 };
            //没检测到就是空的背包栏
            if (!识图.检查范围内颜色(背包x, 背包y, 25, 25, 检测色块))
            {
                物品数量 = index * 4 + i;
                跳出 = true;
                break;
            }
            else
            {
                键鼠.移动鼠标(背包x, 背包y);
                键鼠.点击鼠标左键();
                Sleep(1000);
                if (!识字.查找自动开启吃药())
                {
                    键鼠.移动鼠标((识字.自动开启吃药.x1+ 识字.自动开启吃药.x2)/2, (识字.自动开启吃药.y1+ 识字.自动开启吃药.y2)/2);
                    键鼠.点击鼠标左键();
                    Sleep(1000);
                }
            }
        }
        if (跳出)
        {
            break;
        }
        index++;
    }
    if (!识字.查找背包())
    {
        键鼠.按下按键('I');
    }
    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);

}

void 买药(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    //去地图杂货店
    if (!识字.查找大地图_世界())
    {
        键鼠.按下按键('M');//打开地图传送回去买药
    }
    while (!识图.查找大地图据点() && 识字.查找大地图_世界())
    {
        if (running) {
            return;
        }
        键鼠.移动鼠标(1051, 199);
        键鼠.按下鼠标左键();
        Sleep(1000);
        键鼠.移动鼠标(1051, 689);
        Sleep(1000);
        键鼠.弹起鼠标左键();
        Sleep(1000);
    }
    if (识图.查找大地图据点())
    {
        键鼠.移动鼠标(1051, 199);
        键鼠.点击鼠标左键();
        Sleep(1000);

        键鼠.移动鼠标(144, 171);
        键鼠.点击鼠标左键();
        Sleep(1000);
        键鼠.按下按键('Y');
    }

    //购买
    //先购买70%瓶药水，2000瓶吧，超过70就不会回蓝了
    DWORD startTime = GetTickCount64();
    while (!识字.查找杂货商人()) {
        if (running || GetTickCount64() - startTime > 60000) {
            return;
        }
        Sleep(100);
    }
    Sleep(2000);
    键鼠.移动鼠标(256, 134);
    键鼠.点击鼠标左键();
    Sleep(1000);
    //购买
    键鼠.移动鼠标(609, 439);
    键鼠.点击鼠标左键();
    Sleep(1000);
    //3个0
    键鼠.移动鼠标(551, 476);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.按下按键('Y');
    Sleep(1000);
    //再买一瓶突击灵药
    键鼠.移动鼠标(210, 356);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.按下按键('Y');
    Sleep(1000);
    //一瓶必胜灵药
    键鼠.移动鼠标(217, 433);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.按下按键('Y');
    Sleep(1000);
    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);
    //再购买

}

void 买技能书(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    //去地图技能店
    if (!识字.查找大地图_世界())
    {
        键鼠.按下按键('M');//打开地图传送回去买药
    }
    while (!识图.查找大地图据点() && 识字.查找大地图_世界())
    {
        if (running) {
            return;
        }
        键鼠.移动鼠标(1051, 199);
        键鼠.按下鼠标左键();
        Sleep(1000);
        键鼠.移动鼠标(1051, 689);
        Sleep(1000);
        键鼠.弹起鼠标左键();
        Sleep(1000);
    }
    if (识图.查找大地图据点())
    {
        键鼠.移动鼠标(1051, 199);
        键鼠.点击鼠标左键();
        Sleep(1000);

        键鼠.移动鼠标(194, 551);
        键鼠.点击鼠标左键();
        Sleep(1000);
        键鼠.按下按键('Y');
    }

    //购买
    //先购买70%瓶药水
    DWORD startTime = GetTickCount64();
    while (!识字.查找技能书商人()) {
        if (running || GetTickCount64() - startTime > 60000) {
            return;
        }
        Sleep(100);
    }
    for (size_t i = 0; i < 8; i++)
    {
        Sleep(2000);
        键鼠.移动鼠标(238, 186+i*75);
        键鼠.点击鼠标左键();
        Sleep(1000);
        键鼠.按下按键('Y');
    }
    
    Sleep(1000);
    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);
    //再购买
}

void 通行证领取(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    Sleep(1000);
    //打开通行证
    键鼠.移动鼠标(203, 58);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1000);

    //领取第一个
    键鼠.移动鼠标(308, 241);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1000);

    键鼠.移动鼠标(1000, 553);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1500);
    键鼠.点击鼠标左键();
    Sleep(500);
    //领取第二个
    键鼠.移动鼠标(308, 346);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1000);

    键鼠.移动鼠标(1000, 553);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1500);
    键鼠.点击鼠标左键();
    Sleep(500);

    //领取第三个
    键鼠.移动鼠标(308, 450);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1000);

    键鼠.移动鼠标(1000, 553);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1500);
    键鼠.点击鼠标左键();
    Sleep(500);

    //领取第四个
    键鼠.移动鼠标(308, 544);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1000);

    键鼠.移动鼠标(1000, 553);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1500);
    键鼠.点击鼠标左键();
    Sleep(500);
    //需要确保一定关掉了窗口
    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);
}

void 成就领取(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    Sleep(1000);
    if (识图.查找菜单红点())
    {
        键鼠.移动鼠标(1238, 60);
        Sleep(500);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    else
    {
        while (!(识图.isAuto() || 识图.isQuest())) {
            if (running) {
                return;
            }
            键鼠.按下按键(VK_ESCAPE);
        }
        return;
    }
    if (识图.查找成就红点())
    {
        键鼠.移动鼠标(1098, 192);
        Sleep(500);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    else
    {
        while (!(识图.isAuto() || 识图.isQuest())) {
            if (running) {
                return;
            }
            键鼠.按下按键(VK_ESCAPE);
        }
        return;
    }

    //领取主要成就
    
    键鼠.移动鼠标(644, 502);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1500);
    键鼠.点击鼠标左键();
    Sleep(500);

    //领取成长
    键鼠.移动鼠标(322, 357);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1000);

    键鼠.移动鼠标(1151, 134);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1500);
    键鼠.点击鼠标左键();
    Sleep(500);
    键鼠.按下按键(VK_ESCAPE);
    Sleep(500);
    // 领取协作
    键鼠.移动鼠标(936, 359);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1000);

    键鼠.移动鼠标(1151, 134);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1500);
    键鼠.点击鼠标左键();
    Sleep(500);
    键鼠.按下按键(VK_ESCAPE);
    Sleep(500);

    // 领取装备
    键鼠.移动鼠标(332, 592);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1000);

    键鼠.移动鼠标(1151, 134);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1500);
    键鼠.点击鼠标左键();
    Sleep(500);
    键鼠.按下按键(VK_ESCAPE);
    Sleep(500);

    // 领取冒险
    键鼠.移动鼠标(930, 591);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1000);

    键鼠.移动鼠标(1151, 134);
    Sleep(500);
    键鼠.点击鼠标左键();
    Sleep(1500);
    键鼠.点击鼠标左键();
    Sleep(500);
    键鼠.按下按键(VK_ESCAPE);
    Sleep(500);
    //需要确保一定关掉了窗口
    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);

}

void 邮箱领取(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    Sleep(1000);
    if (识图.查找菜单红点())
    {
        键鼠.移动鼠标(1238, 60);
        Sleep(500);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    else
    {
        while (!(识图.isAuto() || 识图.isQuest())) {
            if (running) {
                return;
            }
            键鼠.按下按键(VK_ESCAPE);
        }
        return;
    }
    if (识图.查找邮箱红点())
    {
        键鼠.移动鼠标(1047, 704);
        键鼠.点击鼠标左键();
        Sleep(2000);
        键鼠.移动鼠标(1172, 718);
        键鼠.点击鼠标左键();
    }
    //需要确保一定关掉了窗口
    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);
}

void 每日商店领取(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    Sleep(1000);
    键鼠.按下按键('V');
    Sleep(1000);
    键鼠.移动鼠标(234,114);//交换
    键鼠.点击鼠标左键();
    Sleep(1000);
    //召唤
    键鼠.移动鼠标(101, 197);
    键鼠.点击鼠标左键();
    Sleep(1000);

    //第一个
    键鼠.移动鼠标(291, 259);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.按下按键('Y');
    Sleep(1000);
    //如果开抽奖类的箱子：
    if (识字.查找跳过()) {
        键鼠.移动鼠标((识字.跳过.x1 + 识字.跳过.x2) / 2, (识字.跳过.y1 + 识字.跳过.y2) / 2);
        键鼠.点击鼠标左键();
        Sleep(1000);
        键鼠.按下按键('Y');
        Sleep(2000);
        键鼠.点击鼠标左键();
        Sleep(2000);
        键鼠.移动鼠标(644, 718);
        Sleep(1000);
        键鼠.点击鼠标左键();
    }
    Sleep(1000);
    键鼠.移动鼠标(75, 411);
    键鼠.点击鼠标左键();
    Sleep(500);

    //第2个
    键鼠.移动鼠标(502, 265);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.按下按键('Y');
    Sleep(1000);
    //如果开抽奖类的箱子：
    if (识字.查找跳过()) {
        键鼠.移动鼠标((识字.跳过.x1 + 识字.跳过.x2) / 2, (识字.跳过.y1 + 识字.跳过.y2) / 2);
        键鼠.点击鼠标左键();
        Sleep(1000);
        键鼠.按下按键('Y');
        Sleep(2000);
        键鼠.点击鼠标左键();
        Sleep(2000);
        键鼠.移动鼠标(644, 718);
        键鼠.点击鼠标左键();
    }
    Sleep(1000);
    键鼠.移动鼠标(75, 411);
    键鼠.点击鼠标左键();
    Sleep(500);

    //第3个
    键鼠.移动鼠标(703, 265);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.按下按键('Y');
    //如果开抽奖类的箱子：
    if (识字.查找跳过()) {
        键鼠.移动鼠标((识字.跳过.x1 + 识字.跳过.x2) / 2, (识字.跳过.y1 + 识字.跳过.y2) / 2);
        键鼠.点击鼠标左键();
        Sleep(1000);
        键鼠.按下按键('Y');
        Sleep(2000);
        键鼠.点击鼠标左键();
        Sleep(2000);
        键鼠.移动鼠标(644, 718);
        键鼠.点击鼠标左键();
    }
    Sleep(1000);
    键鼠.移动鼠标(75, 411);
    键鼠.点击鼠标左键();
    Sleep(500);

    //第4个
    键鼠.移动鼠标(295, 504);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.按下按键('Y');
    //如果开抽奖类的箱子：
    if (识字.查找跳过()) {
        键鼠.移动鼠标((识字.跳过.x1 + 识字.跳过.x2) / 2, (识字.跳过.y1 + 识字.跳过.y2) / 2);
        键鼠.点击鼠标左键();
        Sleep(1000);
        键鼠.按下按键('Y');
        Sleep(2000);
        键鼠.点击鼠标左键();
        Sleep(2000);
        键鼠.移动鼠标(644, 718);
        键鼠.点击鼠标左键();
    }
    Sleep(1000);
    键鼠.移动鼠标(75, 411);
    键鼠.点击鼠标左键();
    Sleep(500);

    //第5个
    键鼠.移动鼠标(499, 489);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.按下按键('Y');
    //如果开抽奖类的箱子：
    if (识字.查找跳过()) {
        键鼠.移动鼠标((识字.跳过.x1 + 识字.跳过.x2) / 2, (识字.跳过.y1 + 识字.跳过.y2) / 2);
        键鼠.点击鼠标左键();
        Sleep(1000);
        键鼠.按下按键('Y');
        Sleep(2000);
        键鼠.点击鼠标左键();
        Sleep(2000);
        键鼠.移动鼠标(644, 718);
        键鼠.点击鼠标左键();
    }
    Sleep(1000);
    键鼠.移动鼠标(75, 411);
    键鼠.点击鼠标左键();
    Sleep(500);
    //普通购买
    键鼠.移动鼠标(96,163);
    键鼠.点击鼠标左键();
    Sleep(1000);

    //武器强化
    键鼠.移动鼠标(307, 276);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.移动鼠标(585, 498);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.按下按键('Y');
    Sleep(1000);
    键鼠.移动鼠标(108, 528);
    键鼠.点击鼠标左键();
    Sleep(500);
    //防具
    键鼠.移动鼠标(505, 279);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.移动鼠标(585, 498);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.按下按键('Y');
    Sleep(1000);
    键鼠.移动鼠标(108, 528);
    键鼠.点击鼠标左键();
    Sleep(500);
    //灵药
    键鼠.移动鼠标(716, 262);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.移动鼠标(585, 498);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.按下按键('Y');
    Sleep(1000);
    键鼠.移动鼠标(108, 528);
    键鼠.点击鼠标左键();
    Sleep(500);
    //发光
    键鼠.移动鼠标(296, 490);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.移动鼠标(585, 498);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.按下按键('Y');
    Sleep(1000);
    键鼠.移动鼠标(108, 528);
    键鼠.点击鼠标左键();
    Sleep(500);
    //
    键鼠.移动鼠标(506, 494);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.移动鼠标(585, 498);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.按下按键('Y');
    Sleep(1000);
    键鼠.移动鼠标(108, 528);
    键鼠.点击鼠标左键();
    Sleep(500);

    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);
}

void 开箱子(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    //查找箱子
    if (!识字.查找背包())
    {
        键鼠.按下按键('I');
    }
    Sleep(500);
    键鼠.移动鼠标(1248, 277); //背包藏品栏
    键鼠.点击鼠标左键();
    Sleep(500);
    键鼠.移动鼠标(1188, 636);//整理背包
    键鼠.点击鼠标左键();
    Sleep(500);
    int index = 0;
    识图坐标 背包起始 = { 1004,140 };//25*25
    int 物品数量 = 0;

    //查找背包,学习技能
    while (识字.查找背包())
    {
        if (running) {
            return;
        }
        int 背包y = 背包起始.y + index * 54;
        bool 跳出 = false;
        for (size_t i = 0; i < 4; i++)
        {
            if (running) {
                return;
            }
            int 背包x = 背包起始.x + i * 54;
            std::array<BYTE, 3> 检测色块 = { 60,60,60 };//空背包
            if (!识图.检查范围内颜色(背包x, 背包y, 25, 25, 检测色块))
            {
                物品数量 = index * 4 + i;
                跳出 = true;
                break;
            }
        }
        if (跳出)
        {
            break;
        }
        index++;
    }
    //从尾部开始开箱子
    //第一个装备还是需要穿戴

    背包起始 = { 1019,155 };//25*25
    int 总数量 = 物品数量;
    while (物品数量 > -1)
    {
        if (running) {
            return;
        }
        if (物品数量== 总数量)
        {
            物品数量--;
            continue;
        }
        int 行号 = 物品数量 / 4;//13/4=3...1  12/4=3...0
        int 列号 = 物品数量 % 4;
        识图坐标 坐标 = { 背包起始.x + 列号 * 54,背包起始.y + 行号 * 54 };
        键鼠.移动鼠标(坐标.x, 坐标.y);
        键鼠.点击鼠标左键();
        Sleep(1000);
        std::wstring 背包物品名称 = 识字.获取背包物品名称();
        if (背包物品名称.find(L"箱子") != std::wstring::npos
            || 背包物品名称.find(L"武器外形") != std::wstring::npos
            || 背包物品名称.find(L"坐骑") != std::wstring::npos
            || 背包物品名称.find(L"滑翔翼") != std::wstring::npos
            || 背包物品名称.find(L"篮子") != std::wstring::npos)
        {
            Sleep(1000);
            键鼠.点击鼠标左键();
            Sleep(1000);
        }
        else
        {
            //需要确保一定关掉了窗口
            while (!(识图.isAuto() || 识图.isQuest())) {
                if (running) {
                    return;
                }
                键鼠.按下按键(VK_ESCAPE);
            }
            return;
        }
        //不需要选择物品的多箱子
        if (识字.获取字符({ 577 ,300 ,691 ,321 }).find(L"数量") != std::wstring::npos)
        {
            键鼠.移动鼠标(761, 423); //max
            键鼠.点击鼠标左键();
            Sleep(1000);
            键鼠.按下按键('Y');
            Sleep(1000);
            键鼠.点击鼠标左键();
            Sleep(1000);

        }
        else if (识字.获取字符({ 654 ,212 ,731 ,231 }).find(L"数量") != std::wstring::npos)
        {
            //需要选择物品的多箱子
            键鼠.移动鼠标(584, 296);
            键鼠.点击鼠标左键();
            Sleep(1000);
            键鼠.移动鼠标(758, 471); //max
            键鼠.点击鼠标左键();
            Sleep(1000);
            键鼠.按下按键('Y');
            Sleep(1000);
            键鼠.点击鼠标左键();
            Sleep(1000);
        }
        //只有一个的箱子
        Sleep(500);
        键鼠.点击鼠标左键();
        Sleep(1500);
        //如果开抽奖类的箱子：
        if (识字.查找跳过()) {
            键鼠.移动鼠标((识字.跳过.x1 + 识字.跳过.x2) / 2, (识字.跳过.y1 + 识字.跳过.y2) / 2);
            键鼠.点击鼠标左键();
            Sleep(1000);
            键鼠.按下按键('Y');
            Sleep(2000);
            键鼠.点击鼠标左键();
            Sleep(2000);
            键鼠.移动鼠标(644, 718);
            Sleep(1000);
            键鼠.点击鼠标左键();
            Sleep(1000);
        }
        物品数量--;
    }
    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);
}

void 强化装备(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    //查找强化卷轴
    if (!识字.查找背包())
    {
        键鼠.按下按键('I');
    }
    Sleep(1000);
    键鼠.移动鼠标(1247, 210); //装备栏
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.移动鼠标(1188, 636);//整理背包
    键鼠.点击鼠标左键();
    Sleep(1000);
    识图坐标 背包E起始 = { 996,137,{204,183,142} };
    //先脱下所有装备
    int 背包装备x[4] = { 1017,1069,1127,1178 }; //直接记录一行的位置
    //计算装备数量
    int index = 0;
    识图坐标 背包起始 = { 1004,140 };//25*25
    int 装备数量 = 0;
    while (识字.查找背包())
    {
        if (running) {
            return;
        }
        int 背包y = 背包起始.y + index * 54;
        bool 跳出 = false;
        for (size_t i = 0; i < 4; i++)
        {
            if (running) {
                return;
            }
            int 背包x = 背包起始.x + i * 54;
            std::array<BYTE, 3> 检测色块 = { 60,60,60 };
            if (!识图.检查范围内颜色(背包x, 背包y, 25, 25, 检测色块))
            {
                装备数量 = index * 4 + i;
                跳出 = true;
                break;
            }
            else
            {
                键鼠.移动鼠标(背包x, 背包y);
                键鼠.点击鼠标左键();
                Sleep(1000);
                键鼠.移动鼠标(765, 459);
                键鼠.点击鼠标左键();
                Sleep(1500);
                键鼠.移动鼠标(1021, 691);
                键鼠.点击鼠标左键();
                Sleep(1000);
                if (识字.查找强化确认弹窗())
                {
                    键鼠.按下按键(VK_ESCAPE);
                    Sleep(1000);
                    continue;
                }
                if (识字.查找强化最大安全阶段())
                {
                    if (!识图.查找强化最大安全阶段())
                    {
                        键鼠.移动鼠标(识图.强化最大安全阶段.x, 识图.强化最大安全阶段.y);
                        键鼠.点击鼠标左键();
                        Sleep(1000);
                    }
                    键鼠.移动鼠标(208, 689);
                    键鼠.点击鼠标左键();
                    Sleep(2000);
                }
                键鼠.按下按键(VK_ESCAPE);
                Sleep(1000);
            }
        }
        if (跳出)
        {
            break;
        }
        index++;
    }

    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(100);

}

void 坐骑外形装备(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    Sleep(1000);
    if (识图.查找菜单红点())
    {
        键鼠.移动鼠标(1238, 60);
        Sleep(500);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    else
    {
        while (!(识图.isAuto() || 识图.isQuest())) {
            if (running) {
                return;
            }
            键鼠.按下按键(VK_ESCAPE);
        }
        return;
    }
    if (识图.查找坐骑红点())
    {
        键鼠.移动鼠标(1145, 255);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    else
    {
        while (!(识图.isAuto() || 识图.isQuest())) {
            if (running) {
                return;
            }
            键鼠.按下按键(VK_ESCAPE);
        }
        return;
    }

    键鼠.移动鼠标(1033,190);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.移动鼠标(1179, 720);
    键鼠.点击鼠标左键();
    Sleep(500);
    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);
}

void 武器外形装备(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    Sleep(1000);
    if (识图.查找菜单红点())
    {
        键鼠.移动鼠标(1238, 60);
        Sleep(500);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    else
    {
        while (!(识图.isAuto() || 识图.isQuest())) {
            if (running) {
                return;
            }
            键鼠.按下按键(VK_ESCAPE);
        }
        return;
    }
    if (识图.查找武器外形红点())
    {
        键鼠.移动鼠标(1240, 257);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    else
    {
        while (!(识图.isAuto() || 识图.isQuest())) {
            if (running) {
                return;
            }
            键鼠.按下按键(VK_ESCAPE);
        }
        return;
    }

    键鼠.移动鼠标(958, 211);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.移动鼠标(1128, 718);
    键鼠.点击鼠标左键();
    Sleep(500);
    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);
}
//暂未完成
void 收藏箱添加(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    return;
    Sleep(1000);
    if (识图.查找菜单红点())
    {
        键鼠.移动鼠标(1238, 60);
        Sleep(500);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    else
    {
        while (!(识图.isAuto() || 识图.isQuest())) {
            if (running) {
                return;
            }
            键鼠.按下按键(VK_ESCAPE);
        }
        return;
    }
    if (识图.查找收藏红点())
    {
        键鼠.移动鼠标(1238, 130);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    else
    {
        while (!(识图.isAuto() || 识图.isQuest())) {
            if (running) {
                return;
            }
            键鼠.按下按键(VK_ESCAPE);
        }
        return;
    }
}

void 信念传承(识字类 识字, 键鼠类 键鼠, 识图类 识图)
{
    Sleep(1000);
    if (识图.查找菜单红点())
    {
        键鼠.移动鼠标(1238, 60);
        Sleep(500);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    else
    {
        while (!(识图.isAuto() || 识图.isQuest())) {
            if (running) {
                return;
            }
            键鼠.按下按键(VK_ESCAPE);
        }
        return;
    }
    if (识图.查找信念传承红点())
    {
        键鼠.移动鼠标(1192, 191);
        键鼠.点击鼠标左键();
        Sleep(1000);
    }
    else
    {
        while (!(识图.isAuto() || 识图.isQuest())) {
            if (running) {
                return;
            }
            键鼠.按下按键(VK_ESCAPE);
        }
        return;
    }
    键鼠.移动鼠标(513, 406);//敏捷
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.移动鼠标(566, 411);//敏捷
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.点击鼠标左键();
    Sleep(1000);
    键鼠.移动鼠标(683, 588);//敏捷
    键鼠.点击鼠标左键();
    Sleep(1000);

    while (!(识图.isAuto() || 识图.isQuest())) {
        if (running) {
            return;
        }
        键鼠.按下按键(VK_ESCAPE);
    }
    Sleep(500);
}